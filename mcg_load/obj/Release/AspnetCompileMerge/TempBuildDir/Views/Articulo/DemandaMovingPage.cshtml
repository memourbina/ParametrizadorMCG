@using System.Web.UI.WebControls
@using mcg_load.Controllers
@model mcg_load.Models.DemandaMoving
@{
    ViewBag.Title = "Index";
    ViewBag.TitleHome = "Inicio";
    ViewBag.DescriptionTitle01 = "Movimiento de Demanda.";
}


@functions{

    protected void PrepareDateEditSettings(MVCxFormLayoutItem item)
    {
        item.NestedExtension().DateEdit(date =>
        {
            date.ShowModelErrors = true;
            date.Properties.ClientSideEvents.DateChanged = "UpdateInfo";
            date.Properties.ValidationSettings.Display = Display.Dynamic;
            date.Properties.ValidationSettings.SetFocusOnError = true;
            date.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
            date.Properties.ValidationSettings.CausesValidation = true;
            date.Properties.CalendarProperties.Columns = 2;
            date.Properties.CalendarProperties.FastNavProperties.DisplayMode = FastNavigationDisplayMode.Inline;
        });
    }

}

@section AdditionalResources {
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <style type="text/css">
        .pickerGroupContainer,
        .pickerFormLayout > .dxflGroupSys {
            padding-left: 0 !important;
        }
    </style>
}

@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}

<script type="text/javascript">
    function UpdateInfo() {
        var daysTotal = End.GetRangeDayCount();
        Info.SetText(daysTotal !== -1 ? daysTotal + ' days' : '');
    }

    $(document).ready(function() {
        if (Boolean('@(ViewBag.SuccessValidation)'))
            alert('The form has been submitted successfully.');
    });
</script>

<div class="text-content">
    @using (Html.BeginForm("DemandaMovingPartial", "Articulo", FormMethod.Post))
    {
        <h4>Tralado de Demanda.</h4>
        <hr />


        <div class="container">
            <div class="form-group">
                @Html.LabelFor(model => model.id_escenario, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.id_escenario, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.id_escenario, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.id_articulo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.id_articulo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.id_articulo, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.DevExpress().FormLayout(settings =>
           {
               settings.Name = "Picker";
               settings.RequiredMarkDisplayMode = RequiredMarkMode.None;
               settings.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
               settings.ControlStyle.CssClass = "pickerFormLayout";
               settings.UseDefaultPaddings = false;
               settings.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
               settings.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;

               var pickerGroup = settings.Items.AddGroupItem(i =>
               {
                   i.Caption = "Date Range Picker";
                   i.ColCount = 2;
                   i.UseDefaultPaddings = false;
                   i.GroupBoxDecoration = GroupBoxDecoration.None;
               });

               pickerGroup.ParentContainerStyle.CssClass = "pickerGroupContainer";

               pickerGroup.Items.Add(m => m.Start, i => PrepareDateEditSettings(i));


               pickerGroup.Items.Add(m => m.End, i => PrepareDateEditSettings(i));


               pickerGroup.Items.Add(i =>
               {
                   i.NestedExtensionType = FormLayoutNestedExtensionItemType.ValidationSummary;
                   i.ShowCaption = DefaultBoolean.False;
                   i.Width = Unit.Percentage(100);
                   i.Height = Unit.Pixel(50);
               });

           }).GetHtml()

            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Planta)
            </div>
            @Html.Action("PlantaPartial")

            <div class="form-group">
                @Html.LabelFor(x => x.Linea)
            </div>
            @Html.Partial("_CallbackPanelPartial", Model)


            <div class="form-group">
                @Html.LabelFor(model => model.Probabilidad, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Probabilidad, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Probabilidad, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Cliente, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Cliente, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Cliente, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Customer_Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Customer_Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Customer_Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Industria, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Industria, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Industria, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Tipo_Pieza, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Tipo_Pieza, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Tipo_Pieza, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>


        </div>
}
    </div>